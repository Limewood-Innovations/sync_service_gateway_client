# coding: utf-8

"""
    sync-service-api-gateway

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IHNotificationUpdateJiraCreate(BaseModel):
    """
    Model for persisting and retrieving Jira-related IH Notification updates.  This model represents the database structure for the Jira update transactions, with additional fields for tracking the transaction status and metadata.  Attributes:     transaction_id (str): A unique identifier for the Jira update transaction.     state (str): The current state of the transaction (e.g., 'initial', 'processing', 'completed').     retry_count (int): The number of retry attempts for the transaction.     creation_date (datetime): The timestamp when the transaction was created.     last_updated (datetime): The timestamp when the transaction was last updated.
    """ # noqa: E501
    parent_transaction_id: StrictStr = Field(description="The parent transaction ID from the IH notification creation process.")
    jira_ticket_number: StrictStr = Field(description="The Jira ticket number associated with the notification.")
    notif_number: StrictInt = Field(description="The notification number for the update.")
    transaction_id: Optional[StrictStr] = Field(default=None, description="A unique transaction ID, automatically generated for the Jira update.")
    state: Optional[StrictStr] = Field(default='initial', description="The current state of the transaction (e.g., 'initial', 'processing', 'completed').")
    retry_count: Optional[StrictInt] = Field(default=0, description="The number of times the transaction has been retried.")
    creation_date: Optional[datetime] = Field(default=None, description="The timestamp when the transaction was created.")
    last_updated: Optional[datetime] = Field(default=None, description="The timestamp when the transaction was last updated.")
    __properties: ClassVar[List[str]] = ["parent_transaction_id", "jira_ticket_number", "notif_number", "transaction_id", "state", "retry_count", "creation_date", "last_updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IHNotificationUpdateJiraCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IHNotificationUpdateJiraCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "parent_transaction_id": obj.get("parent_transaction_id"),
            "jira_ticket_number": obj.get("jira_ticket_number"),
            "notif_number": obj.get("notif_number"),
            "transaction_id": obj.get("transaction_id"),
            "state": obj.get("state") if obj.get("state") is not None else 'initial',
            "retry_count": obj.get("retry_count") if obj.get("retry_count") is not None else 0,
            "creation_date": obj.get("creation_date"),
            "last_updated": obj.get("last_updated")
        })
        return _obj


