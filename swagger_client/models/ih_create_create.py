# coding: utf-8

"""
    FastAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IHCreateCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jira_ticket_number': 'str',
        'notif_type': 'str',
        'short_text': 'str',
        'long_text': 'str',
        'func_loc': 'str',
        'reported_by': 'str',
        'notif_date': 'datetime',
        'plan_group': 'str',
        'partner_number': 'str',
        'plan_plant': 'str',
        'partner_role': 'str',
        'set_active': 'bool'
    }

    attribute_map = {
        'jira_ticket_number': 'jira_ticket_number',
        'notif_type': 'notif_type',
        'short_text': 'short_text',
        'long_text': 'long_text',
        'func_loc': 'func_loc',
        'reported_by': 'reported_by',
        'notif_date': 'notif_date',
        'plan_group': 'plan_group',
        'partner_number': 'partner_number',
        'plan_plant': 'plan_plant',
        'partner_role': 'partner_role',
        'set_active': 'set_active'
    }

    def __init__(self, jira_ticket_number=None, notif_type=None, short_text=None, long_text=None, func_loc=None, reported_by=None, notif_date=None, plan_group=None, partner_number=None, plan_plant=None, partner_role=None, set_active=None):  # noqa: E501
        """IHCreateCreate - a model defined in Swagger"""  # noqa: E501
        self._jira_ticket_number = None
        self._notif_type = None
        self._short_text = None
        self._long_text = None
        self._func_loc = None
        self._reported_by = None
        self._notif_date = None
        self._plan_group = None
        self._partner_number = None
        self._plan_plant = None
        self._partner_role = None
        self._set_active = None
        self.discriminator = None
        self.jira_ticket_number = jira_ticket_number
        self.notif_type = notif_type
        self.short_text = short_text
        self.long_text = long_text
        self.func_loc = func_loc
        self.reported_by = reported_by
        self.notif_date = notif_date
        self.plan_group = plan_group
        self.partner_number = partner_number
        self.plan_plant = plan_plant
        self.partner_role = partner_role
        self.set_active = set_active

    @property
    def jira_ticket_number(self):
        """Gets the jira_ticket_number of this IHCreateCreate.  # noqa: E501


        :return: The jira_ticket_number of this IHCreateCreate.  # noqa: E501
        :rtype: str
        """
        return self._jira_ticket_number

    @jira_ticket_number.setter
    def jira_ticket_number(self, jira_ticket_number):
        """Sets the jira_ticket_number of this IHCreateCreate.


        :param jira_ticket_number: The jira_ticket_number of this IHCreateCreate.  # noqa: E501
        :type: str
        """
        if jira_ticket_number is None:
            raise ValueError("Invalid value for `jira_ticket_number`, must not be `None`")  # noqa: E501

        self._jira_ticket_number = jira_ticket_number

    @property
    def notif_type(self):
        """Gets the notif_type of this IHCreateCreate.  # noqa: E501


        :return: The notif_type of this IHCreateCreate.  # noqa: E501
        :rtype: str
        """
        return self._notif_type

    @notif_type.setter
    def notif_type(self, notif_type):
        """Sets the notif_type of this IHCreateCreate.


        :param notif_type: The notif_type of this IHCreateCreate.  # noqa: E501
        :type: str
        """
        if notif_type is None:
            raise ValueError("Invalid value for `notif_type`, must not be `None`")  # noqa: E501

        self._notif_type = notif_type

    @property
    def short_text(self):
        """Gets the short_text of this IHCreateCreate.  # noqa: E501


        :return: The short_text of this IHCreateCreate.  # noqa: E501
        :rtype: str
        """
        return self._short_text

    @short_text.setter
    def short_text(self, short_text):
        """Sets the short_text of this IHCreateCreate.


        :param short_text: The short_text of this IHCreateCreate.  # noqa: E501
        :type: str
        """
        if short_text is None:
            raise ValueError("Invalid value for `short_text`, must not be `None`")  # noqa: E501

        self._short_text = short_text

    @property
    def long_text(self):
        """Gets the long_text of this IHCreateCreate.  # noqa: E501


        :return: The long_text of this IHCreateCreate.  # noqa: E501
        :rtype: str
        """
        return self._long_text

    @long_text.setter
    def long_text(self, long_text):
        """Sets the long_text of this IHCreateCreate.


        :param long_text: The long_text of this IHCreateCreate.  # noqa: E501
        :type: str
        """
        if long_text is None:
            raise ValueError("Invalid value for `long_text`, must not be `None`")  # noqa: E501

        self._long_text = long_text

    @property
    def func_loc(self):
        """Gets the func_loc of this IHCreateCreate.  # noqa: E501


        :return: The func_loc of this IHCreateCreate.  # noqa: E501
        :rtype: str
        """
        return self._func_loc

    @func_loc.setter
    def func_loc(self, func_loc):
        """Sets the func_loc of this IHCreateCreate.


        :param func_loc: The func_loc of this IHCreateCreate.  # noqa: E501
        :type: str
        """
        if func_loc is None:
            raise ValueError("Invalid value for `func_loc`, must not be `None`")  # noqa: E501

        self._func_loc = func_loc

    @property
    def reported_by(self):
        """Gets the reported_by of this IHCreateCreate.  # noqa: E501


        :return: The reported_by of this IHCreateCreate.  # noqa: E501
        :rtype: str
        """
        return self._reported_by

    @reported_by.setter
    def reported_by(self, reported_by):
        """Sets the reported_by of this IHCreateCreate.


        :param reported_by: The reported_by of this IHCreateCreate.  # noqa: E501
        :type: str
        """
        if reported_by is None:
            raise ValueError("Invalid value for `reported_by`, must not be `None`")  # noqa: E501

        self._reported_by = reported_by

    @property
    def notif_date(self):
        """Gets the notif_date of this IHCreateCreate.  # noqa: E501


        :return: The notif_date of this IHCreateCreate.  # noqa: E501
        :rtype: datetime
        """
        return self._notif_date

    @notif_date.setter
    def notif_date(self, notif_date):
        """Sets the notif_date of this IHCreateCreate.


        :param notif_date: The notif_date of this IHCreateCreate.  # noqa: E501
        :type: datetime
        """
        if notif_date is None:
            raise ValueError("Invalid value for `notif_date`, must not be `None`")  # noqa: E501

        self._notif_date = notif_date

    @property
    def plan_group(self):
        """Gets the plan_group of this IHCreateCreate.  # noqa: E501


        :return: The plan_group of this IHCreateCreate.  # noqa: E501
        :rtype: str
        """
        return self._plan_group

    @plan_group.setter
    def plan_group(self, plan_group):
        """Sets the plan_group of this IHCreateCreate.


        :param plan_group: The plan_group of this IHCreateCreate.  # noqa: E501
        :type: str
        """
        if plan_group is None:
            raise ValueError("Invalid value for `plan_group`, must not be `None`")  # noqa: E501

        self._plan_group = plan_group

    @property
    def partner_number(self):
        """Gets the partner_number of this IHCreateCreate.  # noqa: E501


        :return: The partner_number of this IHCreateCreate.  # noqa: E501
        :rtype: str
        """
        return self._partner_number

    @partner_number.setter
    def partner_number(self, partner_number):
        """Sets the partner_number of this IHCreateCreate.


        :param partner_number: The partner_number of this IHCreateCreate.  # noqa: E501
        :type: str
        """
        if partner_number is None:
            raise ValueError("Invalid value for `partner_number`, must not be `None`")  # noqa: E501

        self._partner_number = partner_number

    @property
    def plan_plant(self):
        """Gets the plan_plant of this IHCreateCreate.  # noqa: E501


        :return: The plan_plant of this IHCreateCreate.  # noqa: E501
        :rtype: str
        """
        return self._plan_plant

    @plan_plant.setter
    def plan_plant(self, plan_plant):
        """Sets the plan_plant of this IHCreateCreate.


        :param plan_plant: The plan_plant of this IHCreateCreate.  # noqa: E501
        :type: str
        """
        if plan_plant is None:
            raise ValueError("Invalid value for `plan_plant`, must not be `None`")  # noqa: E501

        self._plan_plant = plan_plant

    @property
    def partner_role(self):
        """Gets the partner_role of this IHCreateCreate.  # noqa: E501


        :return: The partner_role of this IHCreateCreate.  # noqa: E501
        :rtype: str
        """
        return self._partner_role

    @partner_role.setter
    def partner_role(self, partner_role):
        """Sets the partner_role of this IHCreateCreate.


        :param partner_role: The partner_role of this IHCreateCreate.  # noqa: E501
        :type: str
        """
        if partner_role is None:
            raise ValueError("Invalid value for `partner_role`, must not be `None`")  # noqa: E501

        self._partner_role = partner_role

    @property
    def set_active(self):
        """Gets the set_active of this IHCreateCreate.  # noqa: E501


        :return: The set_active of this IHCreateCreate.  # noqa: E501
        :rtype: bool
        """
        return self._set_active

    @set_active.setter
    def set_active(self, set_active):
        """Sets the set_active of this IHCreateCreate.


        :param set_active: The set_active of this IHCreateCreate.  # noqa: E501
        :type: bool
        """
        if set_active is None:
            raise ValueError("Invalid value for `set_active`, must not be `None`")  # noqa: E501

        self._set_active = set_active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IHCreateCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IHCreateCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
