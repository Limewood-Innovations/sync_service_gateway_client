# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PortalBPUpdate(BaseModel):
    """
    PortalBPUpdate
    """ # noqa: E501
    bpnr: StrictStr = Field(alias="BPNR")
    mail: StrictStr = Field(alias="MAIL")
    mail_change: StrictInt = Field(alias="MAIL_Change")
    mobile: StrictStr = Field(alias="MOBILE")
    mobile_change: StrictInt = Field(alias="MOBILE_Change")
    iban: StrictStr = Field(alias="IBAN")
    iban_change: StrictInt = Field(alias="IBAN_Change")
    datenschutz: StrictStr = Field(alias="DATENSCHUTZ")
    datenschutz_change: StrictInt = Field(alias="DATENSCHUTZ_Change")
    post: StrictStr = Field(alias="POST")
    post_change: StrictInt = Field(alias="POST_Change")
    anmeldeid: StrictStr = Field(alias="ANMELDEID")
    anmeldeid_change: StrictInt = Field(alias="ANMELDEID_Change")
    change_timestamp: datetime = Field(alias="Change_Timestamp")
    transaction_id: Optional[StrictStr] = '6a903766-c426-4f0b-a76b-4e5b98c4d231'
    state: Optional[StrictStr] = 'initial'
    creation_date: Optional[datetime] = None
    last_updated: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["BPNR", "MAIL", "MAIL_Change", "MOBILE", "MOBILE_Change", "IBAN", "IBAN_Change", "DATENSCHUTZ", "DATENSCHUTZ_Change", "POST", "POST_Change", "ANMELDEID", "ANMELDEID_Change", "Change_Timestamp", "transaction_id", "state", "creation_date", "last_updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PortalBPUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PortalBPUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BPNR": obj.get("BPNR"),
            "MAIL": obj.get("MAIL"),
            "MAIL_Change": obj.get("MAIL_Change"),
            "MOBILE": obj.get("MOBILE"),
            "MOBILE_Change": obj.get("MOBILE_Change"),
            "IBAN": obj.get("IBAN"),
            "IBAN_Change": obj.get("IBAN_Change"),
            "DATENSCHUTZ": obj.get("DATENSCHUTZ"),
            "DATENSCHUTZ_Change": obj.get("DATENSCHUTZ_Change"),
            "POST": obj.get("POST"),
            "POST_Change": obj.get("POST_Change"),
            "ANMELDEID": obj.get("ANMELDEID"),
            "ANMELDEID_Change": obj.get("ANMELDEID_Change"),
            "Change_Timestamp": obj.get("Change_Timestamp"),
            "transaction_id": obj.get("transaction_id") if obj.get("transaction_id") is not None else '6a903766-c426-4f0b-a76b-4e5b98c4d231',
            "state": obj.get("state") if obj.get("state") is not None else 'initial',
            "creation_date": obj.get("creation_date"),
            "last_updated": obj.get("last_updated")
        })
        return _obj


